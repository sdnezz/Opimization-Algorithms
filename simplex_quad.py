import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import minimize
import plotly.graph_objects as go
from PySide6.QtWidgets import QVBoxLayout, QWidget
import dash
from dash import dcc, html
from PySide6.QtWebEngineWidgets import QWebEngineView
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
import plotly.io as pio

class SimplexQuad:
    def __init__(self, c=None, A=None, b=None, bounds=None, extr="min", func_structure=None, ineq_signs=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:
        """
        self.extr = extr
        self.invert = -1 if extr == "max" else 1

        self.c = c if c is not None else [2, 2, 2, -4, -6]
        self.default_structure = ["x1^2", "x1*x2", "x2^2", "x1", "x2"]
        self.func_structure = func_structure if func_structure is not None else self.default_structure

        self.A = A if A is not None else [[1, 2]]
        self.b = b if b is not None else [2]
        self.ineq_signs = ineq_signs if ineq_signs is not None else ["<="] * len(self.b)
        self.bounds = bounds if bounds is not None else [(0, None), (0, None)]

    def objective(self, x):
        """–§—É–Ω–∫—Ü–∏—è —Ü–µ–ª–∏"""
        x1, x2 = x
        terms = {
            "x1^2": x1 ** 2,
            "x1*x2": x1 * x2,
            "x2^2": x2 ** 2,
            "x1": x1,
            "x2": x2
        }
        return self.invert * sum(self.c[i] * terms[self.func_structure[i]] for i in range(len(self.c)))

    def constraint(self, x):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –í–°–ï –∑–Ω–∞–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
        constraints = []
        for i in range(len(self.b)):
            if self.ineq_signs[i] == "<=":
                constraints.append({'type': 'ineq', 'fun': lambda x, i=i: self.b[i] - sum(a_ij * x_j for a_ij, x_j in zip(self.A[i], x))})
            elif self.ineq_signs[i] == ">=":
                constraints.append({'type': 'ineq', 'fun': lambda x, i=i: sum(a_ij * x_j for a_ij, x_j in zip(self.A[i], x)) - self.b[i]})
            elif self.ineq_signs[i] == "=":
                constraints.append({'type': 'eq', 'fun': lambda x, i=i: sum(a_ij * x_j for a_ij, x_j in zip(self.A[i], x)) - self.b[i]})
        return constraints

    def plot(self, window):
        """üîπ –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏ —Ä–∏—Å—É–µ—Ç 3D-–≥—Ä–∞—Ñ–∏–∫ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ (–ë–ï–ó –õ–ê–ì–û–í)"""
        x0 = [0.5, 0.5]  # –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
        method = 'trust-constr' if self.extr == "max" else 'SLSQP'
        result = minimize(self.objective, x0, method=method, constraints=self.constraint(x0), bounds=self.bounds)

        if result.success:
            solution = result.x
            f_optimal = self.invert * result.fun
            output_message = f"–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: x1 = {solution[0]}, x2 = {solution[1]}\n" \
                             f"{'–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ' if self.extr == 'min' else '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ'} –∑–Ω–∞—á–µ–Ω–∏–µ F(x): {f_optimal}"
            window.log_output(output_message)

            # üîπ –í—ã–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π 3D-–≥—Ä–∞—Ñ–∏–∫ —á–µ—Ä–µ–∑ Plotly
            self._plot_3d_interface(window, solution)
        else:
            window.log_output("–†–µ—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")

    def _plot_3d_interface(self, window, solution):
        """üîπ 3D-–≥—Ä–∞—Ñ–∏–∫ —á–µ—Ä–µ–∑ Plotly (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª–∫–∞–º–∏ + –±–µ–∑ –ª–∞–≥–æ–≤)"""

        # üîπ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ç–∫—É –∑–Ω–∞—á–µ–Ω–∏–π x1, x2
        x1_vals = np.linspace(0, 2, 50)
        x2_vals = np.linspace(0, 2, 50)
        X1, X2 = np.meshgrid(x1_vals, x2_vals)
        Z = np.array([[self.objective([x1, x2]) for x1, x2 in zip(x1_row, x2_row)] for x1_row, x2_row in zip(X1, X2)])

        # üîπ –°–æ–∑–¥–∞—ë–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π 3D-–≥—Ä–∞—Ñ–∏–∫
        fig = go.Figure()

        # üîπ –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        fig.add_trace(go.Surface(z=Z, x=X1, y=X2, colorscale='viridis'))

        # üîπ –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –æ–ø—Ç–∏–º—É–º–∞
        fig.add_trace(go.Scatter3d(
            x=[solution[0]], y=[solution[1]], z=[self.objective(solution)],
            mode='markers',
            marker=dict(size=6, color='red'),
            name="–û–ø—Ç–∏–º—É–º"
        ))

        # üîπ –£–ª—É—á—à–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω–æ–π (—Å—Ç—Ä–µ–ª–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã + –≤—Ä–∞—â–µ–Ω–∏–µ)
        fig.update_layout(
            title="3D –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏",
            scene=dict(
                xaxis_title="x1",
                yaxis_title="x2",
                zaxis_title="F(x)",
                camera=dict(
                    up=dict(x=0, y=0, z=1),  # –ö–∞–º–µ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–≤–µ—Ä—Ö
                    center=dict(x=0, y=0, z=0),  # –¶–µ–Ω—Ç—Ä –≤—Ä–∞—â–µ–Ω–∏—è
                    eye=dict(x=1.5, y=1.5, z=1.5)  # –ù–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
                )
            ),
            margin=dict(l=0, r=0, b=0, t=30),
        )

        # üîπ –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        fig.update_layout(updatemenus=[
            dict(type="buttons",
                 showactive=False,
                 buttons=[
                     dict(label="‚¨ÖÔ∏è –í–ª–µ–≤–æ",
                          method="relayout",
                          args=["scene.camera.eye", dict(x=-2, y=0, z=1)]),
                     dict(label="‚û°Ô∏è –í–ø—Ä–∞–≤–æ",
                          method="relayout",
                          args=["scene.camera.eye", dict(x=2, y=0, z=1)]),
                     dict(label="‚¨ÜÔ∏è –í–≤–µ—Ä—Ö",
                          method="relayout",
                          args=["scene.camera.eye", dict(x=0, y=2, z=1)]),
                     dict(label="‚¨áÔ∏è –í–Ω–∏–∑",
                          method="relayout",
                          args=["scene.camera.eye", dict(x=0, y=-2, z=1)]),
                 ]
                 )
        ])

        # üîπ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ HTML –¥–ª—è Qt WebEngine
        html_file = "plot.html"
        pio.write_html(fig, file=html_file, auto_open=False)

        # üîπ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≥—Ä–∞—Ñ–∏–∫ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        for i in reversed(range(window.graph_layout.count())):
            widget = window.graph_layout.itemAt(i).widget()
            if widget:
                widget.setParent(None)

        # üîπ –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º Plotly-–≥—Ä–∞—Ñ–∏–∫ –≤ GUI
        web_view = QWebEngineView()
        web_view.load(f"file:///{html_file}")
        window.graph_layout.addWidget(web_view)